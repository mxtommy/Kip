# <%= title %> Widget

Generated by KIP create-host2-widget schematic.

Selector: `<%= selector %>`

## Default Config
```ts
<%= className %>.DEFAULT_CONFIG
```

## Path(s)
Primary path key: `signalKPath` (<%= pathType %>) unit: `<%= convertUnitTo %>` sampleTime: <%= sampleTime %>ms

<% if (zonesSupport) { %>
## Zones Support
This widget was generated with Zones support enabled. Zones scaffolding includes two integration points:

### Zones definitions
- `WidgetMetadataDirective` is imported and injected.
- A `this.metadata.zones()` signal placeholder is included to surface zones metadata information.
- A `highlights` computed signal that generates KIP widget compatible zones array is included. Modify to your needs.
- metadata.observe('signalKPath') call is added automating zone monitoring for the configured path.
- Remove or adapt these parts if your widget will not visualize Signal K Zones.

### Path Data State
The path data may also include a state (zone classification) emitted by the server. That state corresponds to the zone whose range the value falls into. This state is sent whether or not the widget enables zones metadata support. See `path.data.state` in the observed path payload.
<% } %>

## Core Concepts
This widget follows the Host2 architecture. The runtime merges persisted config
(Signal K server or local storage) with `DEFAULT_CONFIG` and feeds it through the
injected directives. All you need to do is set the DEFAULT_CONFIG and the directive
will handle merging and persisting user settings automatically.

### Adding More Paths
Add additional keys under `DEFAULT_CONFIG.paths` (each must include `pathType` and
typical options). Then register observers within the second `effect()` in the
component (group them in a single `untracked` block for performance).

### Optional vs Required Paths
Mark non-critical (optional) paths with `pathRequired: false` to allow empty configuration
without errors. Always guard before observing.

### Units & Conversion
Specify `convertUnitTo` for number paths in `DEFAULT_CONFIG` to let KIP auto-convert
via `UnitsService`. Do not manually convert unless you have a special case.
UnitsService supports most formatting and conversions. If one is missing, add the
unit to the service instead of hardcoding conversion math in a widget.

## Available Angular Services (Commonly Injected)
| Service | Purpose | Typical Use |
|---------|---------|-------------|
| `UnitsService` | Central unit conversion & formatting | Convert or format values when you must post-process derived numbers. |
| `DataSetService` | Historical / trend datasets (chart widgets) | Create/update/remove datasets for charts or statistics. |
| `NotificationsService` | User-visible toast/Snackbar/info/warn/error | Present message to user |
| `SignalKRequestsService` | PUT/Request operations to server | Implement interactive controls and set Signal K path value (e.g., set heading). |
| `DataService` | Low-level Signal K value + metadata access | Rarely needed directly; `WidgetStreamsDirective` wraps it. |
| `CanvasService` | High-DPI sizing, font readiness, offscreen/static layer caching, draw helpers | Register & auto-resize canvases, cache static bitmaps (titles/backgrounds), release GPU memory on destroy. |


Inject with Angular `inject(ServiceClass)` or constructor injection (signals style recommended in Host2 files).

## Directives Supplied to Widgets
| Directive | Role |
|-----------|------|
| `WidgetRuntimeDirective` | Provides merged config (`options()`), id, sizing. |
| `WidgetStreamsDirective` | Observe path data streams with sampling, unit conversion, timeout logic. |
| `WidgetMetadataDirective` | Access zones / metadata (call `observe` for updates, `zones()` for current list). |

## Useful Utility Functions
| Utility | Source | Purpose |
|---------|--------|---------|
| `getColors(themeKey, theme)` | `core/utils/themeColors.utils` | Returns palette variants (normal/dim/bright) for configured color key. |
| `svg-animate.util` helpers | `widgets/utils/svg-animate.util` | Smooth rAF animations (rotation, angle transitions, sectors). |
| `zones-highlight.utils` | `core/utils/zones-highlight.utils` | Build highlight arrays for gauge / chart overlays from zones metadata. |

## Integrating Zones (If Enabled)
When zones support is active, metadata-driven highlights can be computed and surfaced to the template. Use colors derived from the active theme for contrast and accessibility. Keep highlight computation outside change detection hot paths (use signals/computed as shown).

## Performance Tips
1. Batch all `streams.observe` calls in one `untracked` block inside a single `effect`.
2. Store transient UI state in signals, never mutate the merged config object.
3. Use SVG animation helpers for high-frequency visual updates; they run outside Angular via `NgZone`.
4. Keep sample times reasonable (>= 250ms) to avoid widget churn.

## Error / Edge Handling
| Scenario | Recommendation |
|----------|---------------|
| Missing path | Guard before observing; show placeholder or dim widget. |
| Stale data (timeout) | Enable `enableTimeout` and set `dataTimeout` seconds in config. UI can style on timeout state. |
| Unit mismatch | Rely on `convertUnitTo`; avoid manual conversions. |
| Zones absent | Treat highlights array as empty; avoid errors by null-guarding metadata. |

## Icon & Description
Update the icon and description in the `widget.service.ts` entry inserted by the schematic. Replace `placeholder-icon` and the long TODO description. Ensure the SVG symbol id exists in `src/assets/svg/icons.svg` or add a new symbol there.

## Testing
If `--add-spec` was used, a basic spec file is generated. Extend tests to:
1. Mock `WidgetStreamsDirective` emissions to verify signal updates.
2. Validate conditional rendering with and without path values.
3. (Optional) Provide fake zones metadata to exercise highlight logic.

## Deployment Checklist
- [ ] Replace placeholder icon & description
- [ ] Adjust DEFAULT_CONFIG displayName
- [ ] Remove unused TODO comments
- [ ] Remove all console.log() calls
- [ ] Add tests for edge cases (timeouts, no path, zones absent)
